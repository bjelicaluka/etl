Grammar:
  statements*=Statement | Comment | Skip
;

Statement:
  'take' op=TakeOperation target=ID where=Where? 'select' props+=MappedProperty[','] StatementEnd
;

TakeOperation:
  'all'|'first'|'last'
;

MappedProperty:
  ('('src=MultiExp')'|src=Property) 'as' target=Property | src=Property
;

MultiExp:
  left=Exp op=Op right=Exp | exp=Exp
;

Exp:
  '(' mexp=MultiExp ')' | (left=Property|leftLit=Literal) op=Op rexp=Exp | (left=Property|leftLit=Literal) op=Op (right=Property|rightLit=Literal)
;

Op:
  '/'|'*'|'+'|'-'
;

Property:
  /[^\d\W](\w|\.)*\b/
;

Where:
  'where' exp=MultiLogExp
;

MultiLogExp:
  left=LogExp op=LogOp right=LogExp | exp=LogExp
;

LogExp:
  '(' mexp=MultiLogExp ')' | left=RelExp op=LogOp right=LogExp | fn=FunctionCall | exp=RelExp
;

LogOp:
  'and'|'or'
;

FunctionCall:
  name=ID '(' parameters+=FunctionParameter[','] ')'
;

FunctionName:
  'contains' | 'startswith' | 'endswith' | 'exists'
;

FunctionParameter:
  prop=Property|lit=Literal
;

RelExp:
  (left=Property|leftLit=Literal) op=RelOp (right=Property|rightLit=Literal)
;

RelOp:
  '=='|'<='|'>='|'!='|'<'|'>'
;

Literal:
  NUMBER | STRING
;

StatementEnd:
  ';'
;

Comment:
  /\/\/.*\n/
;

Skip:
  /[\n\t\r]/
;